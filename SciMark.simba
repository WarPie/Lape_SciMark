program SciMark;
{$I Lape_SciMark/Constants.pas}
{$I Lape_SciMark/Array2D.pas}
{$I Lape_SciMark/Stopwatch.pas}
{$I Lape_SciMark/Random.pas}
{$I Lape_SciMark/FFT.pas}
{$I Lape_SciMark/LU.pas}
{$I Lape_SciMark/MonteCarlo.pas}
{$I Lape_SciMark/SOR.pas}
{$I Lape_SciMark/SparseCompRow.pas}
{$I Lape_SciMark/Kernel.pas}

var
  min_time: Double;
  FFT_N, SOR_N, Sparse_M, Sparse_Nz, LU_N: integer;
  flops: array [0 .. 5] of Double;
  R: TRandom;
  OptionCount: Int32;
  Options:TStringArray;
begin
  Options := ['large'];  //['large'/'huge', 'minimum_time']
  OptionCount := Length(Options);


  if OptionCount = 2 then
    min_time := StrToFloatDef(Options[1], RESOLUTION_DEFAULT)
  else
    min_time := RESOLUTION_DEFAULT;

  if (OptionCount = 1) and (lowercase(Options[0]) = 'large') Then
  begin
    FFT_N := LG_FFT_SIZE;
    SOR_N := LG_SOR_SIZE;
    Sparse_M := LG_SPARSE_SIZE_M;
    Sparse_Nz := LG_SPARSE_SIZE_nz;
    LU_N := LG_LU_SIZE;
  end
  else if (OptionCount = 1) and (lowercase(Options[0]) = 'huge') Then
  begin
    FFT_N := HG_FFT_SIZE;
    SOR_N := HG_SOR_SIZE;
    Sparse_M := HG_SPARSE_SIZE_M;
    Sparse_Nz := HG_SPARSE_SIZE_nz;
    LU_N := HG_LU_SIZE;
  end else
  begin
    FFT_N := FFT_SIZE;
    SOR_N := SOR_SIZE;
    Sparse_M := SPARSE_SIZE_M;
    Sparse_Nz := SPARSE_SIZE_nz;
    LU_N := LU_SIZE;
  end;

  ClearDebug();
  WriteLn('** ------------------------------------------------------------- **');
  WriteLn('** SciMark2 Numeric Benchmark   |  http://math.nist.gov/scimark  **');
  WriteLn('**                                                               **');
  WriteLn('** Lape Port                                                     **');
  WriteLn('** ------------------------------------------------------------- **');
  Writeln(Format('Mininum running time = %.2f seconds', [min_time]));
  R := new_Random_seed(RANDOM_SEED);

  WriteLn('Computing...');
  flops[1] := kernel_measureFFT(FFT_N, min_time, R);
  flops[2] := kernel_measureSOR(SOR_N, min_time, R);
  flops[3] := kernel_measureMonteCarlo(min_time, R);
  flops[4] := kernel_measureSparseMatMult(Sparse_M, Sparse_Nz, min_time, R);
  flops[5] := kernel_measureLU(LU_N, min_time, R);

  flops[0] := (flops[1] + flops[2] + flops[3] + flops[4] + flops[5]) / 5;
  WriteLn('/-----------------------------------------------------------------\');
  WriteLn(Format('| Composite Score         MFlops: %8.3f',                [flops[0]]));
  WriteLn(Format('| Fast Fourier Transform  MFlops: %8.3f  [N=%d]',        [flops[1], FFT_N]));
  WriteLn(Format('| Succ. Over-Relaxation   MFlops: %8.3f  [%dx%d]',       [flops[2], SOR_N, SOR_N]));
  WriteLn(Format('| Monte Carlo             MFlops: %8.3f',                [flops[3]]));
  WriteLn(Format('| Sparse Matrix Mul.      MFlops: %8.3f  [N=%d, nz=%d]', [flops[4], SPARSE_SIZE_M, SPARSE_SIZE_nz]));
  WriteLn(Format('| LU Factorization        MFlops: %8.3f  [M=%d, N=%d]',  [flops[5], LU_SIZE, LU_SIZE]));
  WriteLn('\-----------------------------------------------------------------/');
end.

